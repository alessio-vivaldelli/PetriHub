sequenceDiagram
    actor Utente as :User
    participant ControllerMostraTutti as :ShowAllController
    participant DAO as :ComputationsDAO
    participant ContestoSessione as :SessionContext
    participant HelperNavigazione as :NavigationHelper

    Utente->>ControllerMostraTutti: initData(CategoriaRete)
    Note over ControllerMostraTutti: categoria = CategoriaRete<br/>(POSSEDUTE/SOTTOSCRITTE/SCOPRI)

    ControllerMostraTutti->>ControllerMostraTutti: inizializzaComponenti()
    create participant ComponenteTabellaReti as :PetriNetTableComponent
    ControllerMostraTutti->>ComponenteTabellaReti: new PetriNetTableComponent()


    ControllerMostraTutti->>ControllerMostraTutti: impostaInterfacciaUtente()
    Note over ControllerMostraTutti: Configura titoloCornice e icone<br/>basandosi sulla categoria

    ControllerMostraTutti->>ControllerMostraTutti: caricaEMostraDati()
    ControllerMostraTutti->>ControllerMostraTutti: caricaDatiPerCategoria()

    ControllerMostraTutti->>ContestoSessione: getInstance().getUser()
    ContestoSessione-->>ControllerMostraTutti: utenteCorrente
    ControllerMostraTutti->>DAO: getNetsByCreator(utente)
    DAO-->>ControllerMostraTutti: List<ReteDoiPetri>

    Note over ControllerMostraTutti: Crea le PetriNetRow con:<br/>nome, autore, data, stato, categoria
    alt categoria == POSSEDUTE
        ControllerMostraTutti->>ControllerMostraTutti: creaRigheDalleReti(reti, ottieniPrimoCalcoloSottoscritto)

    else categoria == SOTTOSCRITTE
        ControllerMostraTutti->>ControllerMostraTutti: creaRigheDalleReti(reti, trovaCalcoloUtente)

    else categoria == SCOPRI
        ControllerMostraTutti->>ControllerMostraTutti: creaRigheDalleReti(reti, trovaCalcoloUtente)
    end



    ControllerMostraTutti->>ComponenteTabellaReti: setData(righeReteDoiPetri)
    ComponenteTabellaReti-->>ControllerMostraTutti: ritorna la tabella popolata
    ControllerMostraTutti -->> Utente: Mostra la tabella

