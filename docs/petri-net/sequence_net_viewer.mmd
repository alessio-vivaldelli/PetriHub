sequenceDiagram
    actor Persona
    participant Controller as NetVisualController


    Persona->>Controller:viewPetriNet(Name, Computation)
    create participant Pane as PetriNetViewerPane
    Controller->>Pane: new(netName, computation)
    Pane->>+Pane: onGraphInitialized
    create participant Parser as PNMLParser
    Pane->>+Parser: parse(netName)
    create participant Model as PetriNetModel
    Parser->>Model: create

    Parser->>Pane: PetriNetModel
    Pane->>GraphView: addNodes()

    Note right of Pane: computeAndApplyFirableTransitions
    opt Computation non NULL
        loop Transition in PetriNetModel
            Pane->>+Model: getIncidentEdge()
            Model->>-Pane: indigentEdge
            opt incident Place token > 0
                Pane->>+Transition: setIsFirable(true)
            end
        end
    end
    deactivate Pane



    Persona->>+Pane:click Transition
    Pane->>+Transition: isFirable()
    Transition->>-Pane: is firable
    opt Ã¨ una transizione cliccabile per l'utente
        Pane->>Transition: setIsFirable(false)
        loop Place incidenti
            Pane->>Place: setToken(0)
        end
        loop Place uscenti
            Pane->>Place: incrementToken()
        end
    end

    Pane->>Pane: computeAndApplyFirableTransitions
    Note right of Controller: Callback
    Pane->>+Controller: onTransitionFired<br>(transitionName, newFiraable Transition,<br> markingState)
    deactivate Pane

    create participant Step as ComputationStep
    Controller->>Step: new()
    Step-->>Controller: computationStep

    Controller->>Controller: aggiungi llo step sul Database
    alt ci sono Transizioni cliccabili per la Persona opposta
        Controller->>Controller: aggiungi notificaa sul Databse
    end

    deactivate Controller

    participant Transition as Transition
    participant GraphView as SmartGraphPanel

